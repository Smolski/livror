main = 'Histograma da Renda',
col = '#BBDEFB')
hist(as.numeric(`Renda_h`), breaks=5)$counts
hist(as.numeric(`Renda_h`), breaks=5)$breaks
boxplot(Idade,horizontal = T)
stem(Idade,scale=2)
empfisc=data.frame(ano=c(1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,
2008,2009,2010), qtd=c(7042,6561,8585,9641,8873,9367,
13856,12192,13326,13390,10839,13379,11978))
plot(empfisc$ano,empfisc$qtd,type="b",main="Título",
xlab="Nome_eixo_x",ylab="Nome_eixo_y",
col="blue",xlim=c(1998,2010))
library(readr)
inmet <- read_delim("https://goo.gl/2p11WS",
";", escape_double = FALSE,
col_types = cols(data = col_date(format = "%m/%d/%Y")),
trim_ws = TRUE)
head(inmet)
plot(inmet$hora,inmet$temp_inst,type = "b",
main = "Temperaturas registradas na estação metereológica
de São Luis Gonzaga, 11 de abril de 2018",
xlab = "hora",ylab = "temperaturas",col="blue",
ylim = c(20,40))
lines(inmet$hora,inmet$temp_max,col="red",type = "b")
lines(inmet$hora,inmet$temp_min,col="green",type = "b")
legend(0,40,c("temp_inst","temp_max","temp_min"),
col =c("blue","red","green"),pch=4.1,cex = 0.75)
#Transforme a variável Renda_h em variável numérica
pesquisa_dados$Renda_h=as.numeric(pesquisa_dados$Renda_h)
#É preciso repetir o comando attach()
attach(pesquisa_dados)
max(Renda_h)
min(Renda_h)
max(Renda_h)-min(Renda_h)
summary(Renda_h)
subset(table(Praticidade),
table(Praticidade)==max(table(Praticidade)))
table(Pessoas_familia)
quantile(Renda_h)
quantile(Renda_h,0.1)
var(Pessoas_familia)
sd(Pessoas_familia)
subset(`Altura_(m)`, Sexo=="Masculino")
mean(subset(`Altura_(m)`, Sexo=="Masculino"))
mean(subset(`Altura_(m)`, Sexo=="Masculino"& Idade>25))
length(subset(Sexo,Sexo=="Feminino" & `Peso_(Kg)`<60))
table(subset(Sexo, Sabor=="Pessimo"))
library(readxl)
url <- "https://github.com/Smolski/livror/raw/master/arvores.xlsx"
destfile <- "arvores.xlsx"
curl::curl_download(url, destfile)
arvores <- read_excel(destfile)
View(arvores)
summary(arvores)
table(arvores$Nomecientifico)
tapply(arvores$diametro_cm, arvores$Nomecientifico, mean)
par(las=2)
barplot(table(arvores$Nomecientifico), horiz=TRUE)
knitr::include_graphics("infestat.png")
horasestudo=c(19,18,20,16,18,19,19,17,22,21)
t.test(horasestudo)
t.test(horasestudo, conf.level = 0.90)
t.test(horasestudo, conf.level = 0.99)
knitr::include_graphics("testehip1.png")
shapiro.test(horasestudo)
prop.test(260,500)
prop.test(260,500,conf.level = 0.90)
prop.test(260,500,conf.level = 0.99)
chuva=c(30.5,34.1,27.9,35,26.9,30.2,28.3,31.7,25.8)
chuva
t.test(chuva,alt="two.sided",mu=30)
tempo=c(22,20,21,23,22,20,23,22,20,24,21,20,21,24,22,22,23,22,20,24)
tempo
t.test(tempo,alt="greater",mu=20)
amostras=c(4.9,5.1,4.9,5.5,5.0,4.7)
t.test(amostras,alt="less",mu=5)
prop.test(3,80,p=0.03,alt="two.sided")
prop.test(530,1000,p=0.6,alt="two.sided")
prop.test(9,500,p=0.015,alt="greater")
prop.test(80,100,p=0.90,alt="less")
knitr::include_graphics("testehip2.png")
require(knitr)
amostdep=data.frame(
`Indivíduo`=c("Peso antes do treinamento","Peso depois do treinamento"),
A=c(99,94),
B=c(62,62),
C=c(74,66),
D=c(59,58),
E=c(70,70),
F=c(73,76)
)
knitr::kable(amostdep, caption = 'Amostras dependentes')
antes=c(99,62,74,59,70,73)
depois=c(94,62,66,58,70,76)
t.test(antes,depois,paired=TRUE)
require(knitr)
cob=data.frame(Cobaia=c("Antes","Depois"))
cobaiaantes=c(635,704,662,560,603,745,698,575,633,669)
cobaiadepois=c(640,712,681,558,610,740,707,585,635,682)
amostdep2=cbind(cob,rbind(cobaiaantes,cobaiadepois))
knitr::kable(amostdep2, caption = 'Amostras dependentes - caso 2',row.names = FALSE)
cobaiaantes=c(635,704,662,560,603,745,698,575,633,669)
cobaiadepois=c(640,712,681,558,610,740,707,585,635,682)
t.test(cobaiaantes,cobaiadepois,paired=TRUE)
require(knitr)
cob2=c("Tecido A","Tecido B")
tecidoa=c(36,26,31,38,28,20,37)
tecidob=c(39,27,35,42,31,39,22)
amostdep3=cbind(c("Tecido A", "Tecido B"),rbind(tecidoa,tecidob))
knitr::kable(amostdep3, caption = 'Comparação de dois tipos diferentes de tecidos', row.names = FALSE)
tecidoa=c(36,26,31,38,28,20,37)
tecidob=c(39,27,35,42,31,39,22)
var.test(tecidoa,tecidob)
t.test(tecidoa, tecidob, var.equal = TRUE, paired=FALSE)
quiquadrado1<-matrix(c(59,31,8,14),nc=2)
quiquadrado1
chisq.test(quiquadrado1)$expected
chisq.test(quiquadrado1)
chisq.test(quiquadrado1, correct=TRUE)
quiquadrado2<-matrix(c(8,3,59,43),nc=2)
quiquadrado2
chisq.test(quiquadrado2)$expected
fisher.test(quiquadrado2)
dados1=matrix(c(5,10,12,8),nc=2)
dados1
mcnemar.test(dados1)
mcnemar=matrix(c(15,18,5,7),nc=2)
mcnemar
chisq.test(mcnemar)$expected
mcnemar.test(mcnemar)
require(knitr)
borrach=data.frame(
Ponto=c("Ponto 1","Ponto 2","Ponto 3","Ponto 4","Ponto 5","Ponto 6","Ponto 7"),
Borrachudos=c(19,12,10,17,25,22,15)
)
knitr::kable(borrach, caption = 'Número de borrachudos nos diferentes pontos')
borrach<-c(20,12,10,17,30,22,35)
chisq.test(borrach)$expected
chisq.test(borrach)
borrachudos<-c(20,12,10,17,30,22,35)
dist<-c(0.10,0.10,0.10,0.15,0.15,0.15,0.25)
chisq.test(borrachudos)$expected
chisq.test(borrachudos, p=dist)
knitr::include_graphics("correlacao1.png")
tempo=c(4,6,5.5,5,6.8,6.5,3.5,4.5,7,8,5.4,6.5,7.7,7.5,5.8)
nota=c(5.5,7.5,8,7,8.1,8.6,4.7,7.5,9.5,9.5,7.8,8,9.1,9.5,8)
plot(tempo,nota)
cor(tempo,nota)
knitr::include_graphics("regress1.png")
regressao=lm(nota~tempo)
regressao
anova(regressao)
summary(regressao)
plot(nota~tempo)
abline(coef(regressao))
confint(regressao)
knitr::include_graphics("residuos1.png")
plot(fitted(regressao), residuals(regressao),
xlab="Valores ajustados", ylab="Residuos")
abline(h=0)
plot(tempo, residuals(regressao), xlab = "Valores independentes",
ylab="Residuos")
abline(h=0)
regressao$residuals
qqnorm(residuals(regressao))
hist(x = regressao$residuals,
xlab = "Resíduos",
ylab = "Densidade",
main = "",
col = "lightgreen",
probability = TRUE)
lines(density(regressao$residuals))
shapiro.test(residuals(regressao))
rstudent(regressao)
rstandard(regressao)
plot(rstandard(regressao))
abline(h=2,col="red")
abline(h=-2,col="red")
plot(rstudent(regressao))
abline(h=2,col="red")
abline(h=-2,col="red")
dffits(regressao)
2*(2/15)^(1/2)
plot(dffits(regressao))
abline(h=-0.73,col="red")
abline(h=0.73,col="red")
x0=data.frame(tempo=5.5)
predict(regressao, x0, interval="prediction")
knitr::include_graphics("rmarkdown.png")
knitr::include_graphics("criararq1.png")
knitr::include_graphics("compilar.png")
knitr::include_graphics("errocodif.png")
knitr::include_graphics("rmark2.png")
knitr::include_graphics("rmarktit.png")
knitr::include_graphics("rmarkform.png")
knitr::include_graphics("rmarklinks.png")
knitr::include_graphics("rmarkimg.png")
knitr::include_graphics("rmarklist.png")
knitr::include_graphics("rmarktab.png")
knitr::include_graphics("rmarkrodape.png")
knitr::include_graphics("rmarkautor.png")
knitr::include_graphics("abstract.png")
knitr::include_graphics("rmarkchunk1.png")
knitr::include_graphics("rmarkchunk2.png")
knitr::include_graphics("rmarkchunkopt.png")
knitr::include_graphics("rmarkchunk3.png")
knitr::include_graphics("rmarkchunktab1.png")
knitr::include_graphics("rmarkchunktab2.png")
knitr::include_graphics("rmarkchunkimg.png")
knitr::include_graphics("rmarkestilos.png")
knitr::include_graphics("rmarkestilos1.png")
knitr::include_graphics("rmarkestilos2.png")
knitr::include_graphics("rmarkbib.png")
knitr::include_graphics("rmarkmendeley.png")
knitr::include_graphics("rmarkcitar.png")
knitr::include_graphics("rmarkcitar1.png")
knitr::include_graphics("rmarkcitarf.png")
barplot(table(`Pessoas_familia`), col=c("blue"),
main = "Frequência de pessoas por família",
xlab = "Frequência",
ylab = "Pessoas",
border = "red",
labels=TRUE)
barplot(table(`Pessoas_familia`), col=c("blue"),
main = "Frequência de pessoas por família",
xlab = "Frequência",
ylab = "Pessoas",
border = "red",
label=TRUE)
barplot(table(`Pessoas_familia`), col=c("blue"),
main = "Frequência de pessoas por família",
xlab = "Frequência",
ylab = "Pessoas",
border = "red",
labels=T)
barplot(table(Sexo),horiz=T)
par(las=2)
barplot(table(Sexo),horiz=T)
par(las=2)
par(mar=c(5,8,4,2))
barplot(table(Sexo),horiz=T)
par(las=2)
par(mar=c(5,8,4,2))
a=barplot(table(Sexo),horiz=T)
text(a)
a=barplot(table(Sexo),horiz=T)$counts
barplot(table(Sexo),horiz=T)$counts
par(las=2)
par(mar=c(5,8,4,2))
a=barplot(table(Sexo),horiz=T)
text(a$counts)
par(las=2)
par(mar=c(5,8,4,2))
a=barplot(table(Sexo),horiz=T)
text(a[,2])
par(las=2)
par(mar=c(5,8,4,2))
a=barplot(table(Sexo),horiz=T)
text(a[2,])
par(las=2)
par(mar=c(5,8,4,2))
a=barplot(table(Sexo),horiz=T)
text(a[2])
par(las=2)
par(mar=c(5,8,4,2))
a=barplot(table(Sexo),horiz=T)
par(las=2)
par(mar=c(5,8,4,2))
a=barplot(table(Sexo),horiz=T)
text(a, tot + 3, format(tot), xpd = TRUE, col = "blue")
par(las=2)
par(mar=c(5,8,4,2))
a=barplot(table(Sexo),horiz=T)
tot <- colMeans(a)
text(a, tot + 3, format(tot), xpd = TRUE, col = "blue")
View(a)
par(las=2)
par(mar=c(5,8,4,2))
a=barplot(table(Sexo),horiz=T)
barplot(table(`Pessoas_familia`), col=c("blue"),
main = "Frequência de pessoas por família",
xlab = "Frequência",
ylab = "Pessoas",
border = "red")
par(las=2)
par(mar=c(5,8,4,2))
barplot(table(arvores$Nomecientifico), horiz=TRUE)
par(las=2)
par(mar=c(8,8,4,2))
barplot(table(arvores$Nomecientifico), horiz=TRUE)
par(las=2)
par(mar=c(2,8,4,2))
barplot(table(arvores$Nomecientifico), horiz=TRUE)
par(las=2)
par(mar=c(5,2,4,2))
barplot(table(arvores$Nomecientifico), horiz=TRUE)
par(las=2)
par(mar=c(5,10,4,2))
barplot(table(arvores$Nomecientifico), horiz=TRUE)
par(las=2)
par(mar=c(5,15,4,2))
barplot(table(arvores$Nomecientifico), horiz=TRUE)
abertura <- c("03/02/69", "17/08/67")
fechamento <- c("2000-20-01", "1999-14-08")
abertura <- as.Date(abertura, format = "%d/%m/%y")
fechamento <- as.Date(fechamento, format = "%Y-%d-%m")
# Diferença de dias dos intervalos informados
abertura-fechamento
dif=abertura-fechamento
dif
class(dif)
as.numeric(dif)
abertura
abertura <- c("03/02/69")
fechamento <- c("2000-20-01")
abertura <- as.Date(abertura, format = "%d/%m/%y")
fechamento <- as.Date(fechamento, format = "%Y-%d-%m")
# Diferença de dias dos intervalos informados
dif=abertura-fechamento
dif
class(dif)
as.numeric(dif)
class(abertura)
abertura <- c("03/02/69")
fechamento <- c("2000-20-01")
abertura <- as.Date(abertura, format = "%d/%m/%y")
fechamento <- as.Date(fechamento, format = "%Y-%d-%m")
class(abertura)
class(fechamento)
# Diferença de dias dos intervalos informados
dif=abertura-fechamento
dif
class(dif)
as.numeric(dif)
units(dif)
library(readxl)
url <- "https://github.com/Smolski/livror/raw/master/pesquisa_dados.xlsx"
destfile <- "pesquisa_dados.xlsx"
curl::curl_download(url, destfile)
pesquisa_dados <- read_excel(destfile)
attach(pesquisa_dados)
ls.str(pesquisa_dados)
View(pesquisa_dados)
package(Amelia)
library(Amelia)
?Amelia
summary(pesquisa_dados)
missmap(pesquisa_dados)
missmap(irris)
missmap(iris)
str(pesquisa_dados)
class(pesquisa_dados)
boxplot(Idade~Sabor, data=pesquisa_dados)
boxplot(Idade~Praticidade, data=pesquisa_dados)
set.seed()
boxplot(Idade~Sexo, data=pesquisa_dados)
boxplot(Idade~Praticidade, data=pesquisa_dados)
boxplot(Idade~Preço, data=pesquisa_dados)
boxplot(Idade~Sabor, data=pesquisa_dados)
boxplot(Renda_h~Sabor, data=pesquisa_dados)
boxplot(`Renda_h`~Sabor, data=pesquisa_dados)
boxplot(Sexo~Sabor, data=pesquisa_dados)
boxplot(Sexo~Idade, data=pesquisa_dados)
boxplot(Idade~Sexo, data=pesquisa_dados)
boxplot(Sexo~Altura, data=pesquisa_dados)
boxplot(Sexo~Altura_(m), data=pesquisa_dados)
boxplot(Sexo~`Altura_(m)``, data=pesquisa_dados)
boxplot(Sexo~`Altura_(m)`, data=pesquisa_dados)
boxplot(`consumo_pos`~Idade, data=pesquisa_dados)
boxplot(Praticidade~Idade, data=pesquisa_dados)
boxplot(Idade~Praticidade, data=pesquisa_dados)
boxplot(`Renda_h`~Praticidade, data=pesquisa_dados)
boxplot(Divulgacao~Praticidade, data=pesquisa_dados)
boxplot(Idade~Divulgacao, data=pesquisa_dados)
boxplot(Idade~Sexo, data=pesquisa_dados)
boxplot(Idade~Sabor, data=pesquisa_dados)
boxplot(Idade~Sabor, data=pesquisa_dados)
library(Rcmdr)
install.packages("RcmdrPlugin.IPSUR")
Sys.time()
Sys.date()
Sys.Date()
sys.call()
sys.source()
sys.status()
Sys.chmod()
t(mtcars)
library("RcmdrPlugin.IPSUR", lib.loc="~/R/win-library/3.5")
install.packages("RcmdrPlugin.KMggplot2")
library("RcmdrPlugin.KMggplot2", lib.loc="~/R/win-library/3.5")
library("RcmdrPlugin.KMggplot2", lib.loc="~/R/win-library/3.5")
library(Rcmdr)
library(Rcmdr)
detach("package:RcmdrPlugin.KMggplot2", unload=TRUE)
library("Rcmdr", lib.loc="~/R/win-library/3.5")
?lubridate
??lubridate
library(lubridate)
ymd(20190215)
#> [1] "2010-12-15"
mdy("2/15/19")
#> [1] "2017-04-01"
library(lubridate)
ymd(20190215)
mdy("2/15/19")
# Criando uma base de dados
data=data.frame(data=c("01/01/2019","02/02/2019","02/02/2019","05/02/2019","06/02/2019"),
quant=c(100,200,100,150,300),
valor=c(550.00,600.00,100.00,150.00,250.00))
head(data)
# Criando uma nova variável do ano da venda
data$ano=year(data$data)
data
# Criando uma nova variável do mês da venda
data$mes=month(data$data)
data
# Criando nova variável do dia da venda
data$dia=day(data$data)
data
# Criando nova variável do dia da semana da venda
data$diasem=wday(data$data, label=TRUE)
data
# Valor das vendas por mês
aggregate(data$valor, list(Var = data$mes), sum)
# Quantidade de vendas por mês
aggregate(data$quant, list(Var = data$mes), sum)
# Valor das vendas por dia
aggregate(data$valor, list(Var = data$dia), sum)
# Valor das vendas por dia
aggregate(data$valor, list(Var = data$diasem), sum)
aggregate(valor ~ diasem + mes, data = data, sum)
library(dplyr)
data %>%
group_by(diasem) %>%
summarise(avg = sum(valor))
aggregate(data$valor, list(Var = data$mes), sum)
aggregate(data$valor, list(Var = data$mes), sum)
aggregate(data$quant, list(Var = data$mes), sum)
aggregate(data$valor, list(Var = data$dia), sum)
aggregate(data$valor, list(Var = data$diasem), sum)
# Criando nova variável do dia da venda
data$dia=day(data$data)
data
# Configurando a variável data
data$data=dmy(data$data)
# Criando uma nova variável do ano da venda
data$ano=year(data$data)
data
# Criando uma nova variável do mês da venda
data$mes=month(data$data)
data
# Criando nova variável do dia da venda
data$dia=day(data$data)
data
# Criando nova variável do dia da semana da venda
data$diasem=wday(data$data, label=TRUE)
data
data
aggregate(valor ~ diasem + mes, data = data, sum)
aggregate(valor ~ mes+diasem, data = data, sum)
data %>%
group_by(diasem) %>%
summarise(avg = sum(valor))
data %>%
group_by(diasem) %>%
summarise(tot = sum(valor))
data %>%
group_by(diasem) %>%
summarise(total = sum(valor))
data %>%
group_by(dia) %>%
summarise(total = sum(valor))
data %>%
group_by(ano) %>%
summarise(total = sum(valor))
# Criando uma base de dados
data=data.frame(data=c("01/01/2018","02/02/2019","02/02/2019","05/02/2019","06/02/2019"),
quant=c(100,200,100,150,300),
valor=c(550.00,600.00,100.00,150.00,250.00))
head(data)
# Configurando a variável data
data$data=dmy(data$data)
# Criando uma nova variável do ano da venda
data$ano=year(data$data)
data
# Criando uma nova variável do mês da venda
data$mes=month(data$data)
data
# Criando nova variável do dia da venda
data$dia=day(data$data)
data
# Criando nova variável do dia da semana da venda
data$diasem=wday(data$data, label=TRUE)
data
# Valor das vendas por mês
aggregate(data$valor, list(Var = data$mes), sum)
# Quantidade de vendas por mês
aggregate(data$quant, list(Var = data$mes), sum)
# Valor das vendas por dia
aggregate(data$valor, list(Var = data$dia), sum)
# Valor das vendas por dia
aggregate(data$valor, list(Var = data$diasem), sum)
# Valor das vendas por mês e dia da semana
aggregate(valor ~ mes + diasem, data = data, sum)
# Utilizando o pacote dplyr
library(dplyr)
data %>%
group_by(diasem) %>%
summarise(total = sum(valor))
data %>%
group_by(ano) %>%
summarise(total = sum(valor))
