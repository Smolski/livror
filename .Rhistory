4/2
# multiplicação
4*2
# exponenciação
4^2
# prioridade de resolução
19 + 26 /4 -2 *10
((19 + 26) /(4 -2))*10
# raiz quadrada
sqrt(16)
# Logaritmo
log(1)
# maior que
2 > 1
1 > 2
# menor que
1 < 2
# maior ou igual a
0 >= (2+(-2))
# menor ou igual a
1 <= 3
# conjunção
9 > 11 & 0 < 1
# ou
6 < 5 | 0 > -1
# igual a
1 == 2/2
# diferente de
1 != 2
#Criando um objeto simples
objeto = "meu primeiro objeto" #enter
#Agora para retomar o objeto criado:
objeto #enter
#Pode ser efetuada uma operação:
a= 2+1
a
#Lista objetos do ambiente
ls()
#Remover um banco de dados
rm(a)
idade=c('11', '12', '31')
nomes=c("Elisa", "Priscila", "Carol")
cep=c(98700000,98701000,98702000)
idade= as.numeric(idade)
idade
cep = as.character(cep)
cep
#Carregando dados da base do RSdudio iris.
data(iris)
#Visualizando as primeiras 6 colunas
head(iris)
#Resumo do objeto
summary(iris)
#Para visualizar os nomes das colunas dos dados:
names(iris)
#vizualizar as ultimas seis linhas do objetos
tail(iris)
class(iris)
class(iris$Sepal.Length)
class(iris$Species)
ls.str(iris)
View(iris)
dim(iris)
#Alterar o nome da coluna, sendo que o '[5]' indica que está na quinta coluna.
colnames(iris)[5]='Especie'
#Definindo a função attach para o objeto 'dados'.
attach(iris)
#Efetuando o sumário de 'pop.total'.
summary(Petal.Width)
#Como a coluna 'distrito' é um fator, o sumário será
#a contagem da quantidade de cada fator na coluna.
summary(Especie)
#Função 'tapply', número médio da população total por distrito.
tapply(Sepal.Length, Especie, mean)
#Função 'tapply' considerando NAs:
tapply(Sepal.Length, Especie, mean)
#Função 'tapply' sem considerar NAs:
tapply(Sepal.Length, Especie, mean, na.rm=T)
dadossetosa=subset(iris, Especie=='setosa')
head(dadossetosa)
dadossetosa2=subset(iris, Especie=='setosa'& Sepal.Length>5)
head(dadossetosa2)
# Carregando a base
source("http://www.openintro.org/stat/data/cdc.R")
#Vizualiza-se as primeiras linhas
head(cdc)
# Efetua-se a contagem dos dados qualitativos com a função table
table(cdc$genhlth,cdc$gender)
# Adiciona-se a soma dos valores das linhas e colunas
addmargins(table(cdc$genhlth,cdc$gender))
# Criação de um vetor
c(2, 4, 6)
c(2:6)
# Criação de um vetor a partir do intervalo entre cada elemento e valores
#mínimo e máximo
seq(2, 3, by=0.5)
rep(1:3, times=4)
rep(1:3, each=3)
sexo<-factor(rep(c("F", "M"),each=8))
sexo
numeros=rep(1:3,each=3)
numeros
numeros.f<-factor(numeros)
numeros.f
tratamentos=factor(rep(c("controle","adubo A","adubo B"), each=4))
tratamentos
tratamentos=factor(rep(c("controle","adubo A","adubo B"), each=4),
levels=c("controle", "adubo A", "adubo B"))
tratamentos
participantes=factor(rep("mulheres",10), levels=c("mulheres","homens"))
participantes
nome.da.matriz= matrix(data=1:12,nrow = 3,ncol = 4)
nome.da.matriz
nome.da.matriz= matrix(data=1:12,nrow = 3,ncol = 4, byrow=T)
nome.da.matriz
lista= list(matriz=matrix(c(1,2,1), nrow=3, ncol=2))
lista
lista= list(matriz=matrix(c(1,2,1,5,7,9), nrow=3, ncol=2),vetor=1:6)
lista
lista
length(lista)
names(lista)
lista.1= list(matriz=matrix(c(1,2,1,5,7,9), nrow=3, ncol=2),
vetor=1:6)
lista.2= list(nomes=c("Marcelo", "Fábio", "Felipe"),
idade=c(25, 34, 26))
c(lista.1,lista.2)
estudantes= c("Camila", "Pedro", "Marcelo","Guilherme")
idade=c(21,17,17,18)
peso=c(65,79,80,100)
informacoes=data.frame(estudantes,idade,peso)
informacoes
informacoes$cidades=c("Nova Hartz","Gramado","Soledade",
"Porto Alegre")
informacoes
length(subset(informacoes$cidades, informacoes$cidades=="Soledade"))
library(dplyr)
starwars=data.frame(starwars[1:5])
str(starwars)
summary(starwars)
names(starwars)=abbreviate(names(starwars), minlength = 3)
names(starwars)
names(starwars)[1]="Nome"
names(starwars)=c("Nome", "Altura", "Peso", "Corcabelo", "Corpele")
names(starwars)
starwars$Corcabelo=as.factor(starwars$Corcabelo)
starwars$Corpele=as.factor(starwars$Corpele)
summary(starwars$Corpele)
head(is.na(starwars))
table(is.na(starwars))
# Substituindo NAs por média
starwars$Altura[is.na(starwars$Altura)]=mean(starwars$Altura, na.rm=TRUE)
summary(starwars$Altura)
# Substituindo NAs por zero
starwars$Peso[is.na(starwars$Peso)]=0
summary(starwars$Peso)
starwars$Peso[starwars$Peso==0]=NA
summary(starwars$Peso)
starwars=na.omit(starwars)
summary(starwars)
informacoes.2=edit(informacoes)
knitr::include_graphics("95.png")
knitr::include_graphics("10.png")
informacoes.2
# Crição do data frame
estudantes=c("Guilherme", "Marcelo", "Pedro", "Camila")
altura= c(1.50, 1.9, 1.74, 1.80)
informacoes.3=data.frame(estudantes, altura)
head(informacoes.3)
# União de um banco de dados (existencia de uma váriavel em comum)
informacoes=merge(informacoes.2,informacoes.3, by="estudantes")
head(informacoes)
informacoes$Imc=c(informacoes$peso/(informacoes$altura^2))
informacoes
# Substituir números na coluna
informacoes$idade[informacoes$idade == 17] <- 19
informacoes
# Classificar qualitativamente informações em um determinado intervalo
classificacao=ifelse(informacoes$Imc<25, "peso normal","excesso de peso")
informacoes=cbind(informacoes, classificacao)
informacoes
library(knitr)
imc=data.frame(Resultado=c("Abaixo de 17",
"Entre 17 e 18,49",
"Entre 18,5 e 24,99",
"Entre 25 e 29,99",
"Entre 30 e 34,99",
"Entre 35 e 39,99",
"Acima de 40"),
Significado=c("Muito abaixo do peso",
"Abaixo do peso",
"Peso normal",
"Acima do peso",
"Obesidade I",
"Obesidade II (severa)",
"Obesidade III (mórbida)"))
knitr::kable(imc, caption = 'Valores padrão para o IMC')
# Classificar informações usando o código binário
informacoes$binario= ifelse(informacoes$classificacao
== 'peso normal', 1, 0)
informacoes
novo1=data.frame(estudantes="Francisco", idade=30, peso=59,
cidades="Ijuí",
altura="1.59",
Imc= 23.33768,
classificacao= "peso normal",
tipoimc="Peso Normal",
binario=1)
informacoes=rbind(informacoes, novo1)
summary(regressaolinear)
plot(nota~tempo)
abline(coef(regressaolinear))
plot(nota~tempo)
abline(regressaolinear)
plot(nota~tempo)
abline(regressaolinear)
qqnorm(residuals(regressaolinear))
novo1=data.frame(estudantes="Francisco", idade=30, peso=59,
cidades="Ijuí",
altura="1.59",
Imc= 23.33768,
classificacao= "peso normal",
tipoimc="Peso Normal",
binario=1)
informacoes=rbind(informacoes, novo1)
novo1
informacoes
informacoes$tipoimc=ifelse(informacoes$Imc<17, "Muito abaixo do peso",
ifelse(informacoes$Imc>=17&informacoes$Imc<=18.49,"Abaixo do peso",
ifelse(informacoes$Imc>=18.5&informacoes$Imc<=24.99,"Peso Normal",
ifelse(informacoes$Imc>=25&informacoes$Imc<=29.99,"Acima do Peso",
ifelse(informacoes$Imc>=30&informacoes$Imc<=34.99,"Obesidade I",
ifelse(informacoes$Imc>=35&informacoes$Imc<=39.99,"Obesidade II",
"Obesidade III"))))))
informacoes
plot(rstudent(regressaolinear))
abline(h=2,col="red")
abline(h=-2,col="red")
plot(rstudent(regressaolinear)) abline(h=2,col="red")
plot(rstudent(regressaolinear))
abline(h=2,col="red")
abline(h=-2,col="red")
citation(readxl)
citation(readr)
citation(readr)
citation(BETS)
citation(BETs)
citation("readxl")
citation("readr")
citation("haven")
citation("PerformanceAnalytics")
citation("knitr")
citation("dplyr")
citation("tidyr")
citation("stringr")
citation("lubridate")
citation("Amelia")
citation("stargazer")
citation("xtable")
citation("miktex")
citation("shiny")
citation("yaml")
?yaml
??yaml
citation("pander")
dir()
getwd()
data(package="BETs")
data(package="BETS")
data(package="Amelia")
data(package="AER")
TechChange
data(TechChange)
data(UKInflation)
data("UKInflation")
ncol(iris)
nrow(iris)
dim(starwars)
system()
Sys.timezone()
system.file()
system.file()
devtools::install_github("massimoaria/bibliometrix")
devtools::install_github("massimoaria/bibliometrix")
devtools::install_github("massimoaria/bibliometrix", force=TRUE)
dffits(regressaolinear)
rm(corpus, corpusVars, dtm, wordsDtm, voc, termFreqs, freqTerms, specTerms,
corpusCa)
corpus <- VCorpus(DirSource("d:/Users/Felipe/Desktop/livro",
encoding="ISO-8859-1"), readerControl=list(language="pt"))
library(RcmdrPlugin.temis)
rm(corpus, corpusVars, dtm, wordsDtm, voc, termFreqs, freqTerms, specTerms,
corpusCa)
corpus <- VCorpus(DirSource("d:/Users/Felipe/Desktop/livro",
encoding="ISO-8859-1"), readerControl=list(language="pt"))
corpusVars <- data.frame(var1=factor(rep("", length(corpus))),
row.names=names(corpus))
activeDataSet("corpusVars")
dtm
??activeDataSet
library(RcmdrPlugin.temis)
library(Rcmdr)
library(RcmdrMisc)
rm(corpus, corpusVars, dtm, wordsDtm, voc, termFreqs, freqTerms, specTerms,
corpusCa)
corpus <- VCorpus(DirSource("d:/Users/Felipe/Desktop/livro",
encoding="ISO-8859-1"), readerControl=list(language="pt"))
corpusVars <- data.frame(var1=factor(rep("", length(corpus))),
row.names=names(corpus))
activeDataSet("corpusVars")
dtm
library(RcmdrPlugin.temis)
library(Rcmdr)
library(RcmdrMisc)
rm(corpus, corpusVars, dtm, wordsDtm, voc, termFreqs, freqTerms, specTerms,
corpusCa)
corpus <- VCorpus(DirSource("d:/Users/Felipe/Desktop/livro",
encoding="ISO-8859-1"), readerControl=list(language="pt"))
corpusVars <- data.frame(var1=factor(rep("", length(corpus))),
row.names=names(corpus))
activeDataSet("corpusVars")
setCorpusVariables()
dtmCorpus <- corpus
dtmCorpus <- tm_map(dtmCorpus, content_transformer(tolower))
dtmCorpus <- tm_map(dtmCorpus, content_transformer(function(x)
gsub("\\p{P}|\\p{S}|\\p{Z}|\\p{C}", " ", x, perl=TRUE)))
dtmCorpus <- tm_map(dtmCorpus, removeNumbers)
dtm <- DocumentTermMatrix(dtmCorpus, control=list(tolower=FALSE,
wordLengths=c(2, Inf)))
rm(dtmCorpus)
dictionary <- data.frame(row.names=colnames(dtm),
"Occurrences"=col_sums(dtm), "Stopword"=ifelse(colnames(dtm) %in%
stopwords("pt"), "Stopword", ""), stringsAsFactors=FALSE)
dtm <- dtm[, !colnames(dtm) %in% stopwords("pt")]
attr(dtm, "dictionary") <- dictionary
rm(dictionary)
meta(corpus, type="corpus", tag="language") <- attr(dtm, "language") <- "pt"
meta(corpus, type="corpus", tag="processing") <- attr(dtm, "processing") <-
c(lowercase=TRUE, punctuation=TRUE, digits=TRUE, stopwords=TRUE,
stemming=FALSE, customStemming=FALSE, twitter=FALSE, removeHashtags=NA,
removeNames=NA)
corpus
dtm
corpus
dtm
corpus
View(dtm)
freqTerms <- frequentTerms(dtm, NULL, 100)
attr(freqTerms, "title") <- "Most frequent terms by Document"
freqTerms
str(dtm)
str(corpus)
View(dtm)
str(corpus$i)
str(corpusi)
str(corpus@i)
freqTerms <- frequentTerms(dtm, NULL, 200)
attr(freqTerms, "title") <- "Most frequent terms by Document"
freqTerms
freqTerms <- frequentTerms(dtm, NULL, 100)
attr(freqTerms, "title") <- "Most frequent terms by Document"
freqTerms
dict2 = freqTerms[1]
View(dict2)
dict2 = as.data.frame(freqTerms[1])
View(dict2)
dict <- termsDictionary(dtm, "occurrences")
attr(dict, "title") <- "Terms dictionary sorted by number of occurrences"
dict <- termsDictionary(dtm, "occurrences")
dict <- termsDictionary(dtm, "occurrences")
library(RcmdrPlugin.temis)
library(Rcmdr)
library(RcmdrMisc)
dict <- termsDictionary(dtm, "occurrences")
library(RcmdrPlugin.temis)
library(Rcmdr)
library(RcmdrMisc)
rm(corpus, corpusVars, dtm, wordsDtm, voc, termFreqs, freqTerms, specTerms,
corpusCa)
corpus <- VCorpus(DirSource("d:/Users/Felipe/Desktop/livro",
encoding="ISO-8859-1"), readerControl=list(language="pt"))
corpusVars <- data.frame(var1=factor(rep("", length(corpus))),
row.names=names(corpus))
activeDataSet("corpusVars")
library(RcmdrPlugin.temis)
library(Rcmdr)
library(RcmdrMisc)
rm(corpus, corpusVars, dtm, wordsDtm, voc, termFreqs, freqTerms, specTerms,
corpusCa)
corpus <- VCorpus(DirSource("d:/Users/Felipe/Desktop/livro",
encoding="ISO-8859-1"), readerControl=list(language="pt"))
corpusVars <- data.frame(var1=factor(rep("", length(corpus))),
row.names=names(corpus))
activeDataSet("corpusVars")
??activeDataSet
install.packages("Rcmdr.Utilities")
library(RcmdrPlugin.temis)
library(Rcmdr)
library(RcmdrMisc)
library(rcm)
library(RcmdrPlugin.temis)
library(Rcmdr)
library(RcmdrMisc)
library(Rcmdr.Utilities)
library(RcmdrPlugin.temis)
library(RcmdrPlugin.temis)
library(RcmdrPlugin.temis)
library(Rcmdr)
library(RcmdrMisc)
rm(corpus, corpusVars)
corpus <- VCorpus(DirSource("d:/Users/Felipe/Desktop/livro", encoding="ISO-8859-1"),
readerControl=list(language="pt"))
corpusVars <- data.frame(var1=factor(rep("", length(corpus))), row.names=names(corpus))
activeDataSet("corpusVars")
setCorpusVariables()
dtmCorpus <- corpus
dtmCorpus <- tm_map(dtmCorpus, content_transformer(tolower))
dtmCorpus <- tm_map(dtmCorpus, content_transformer(function(x) gsub("\\p{P}|\\p{S}|\\p{Z}|\\p{C}", " ", x,
perl=TRUE)))
dtmCorpus <- tm_map(dtmCorpus, removeNumbers)
dtm <- DocumentTermMatrix(dtmCorpus, control=list(tolower=FALSE, wordLengths=c(2, Inf)))
rm(dtmCorpus)
dictionary <- data.frame(row.names=colnames(dtm), "Occurrences"=col_sums(dtm),
"Stopword"=ifelse(colnames(dtm) %in% stopwords("pt"), "Stopword", ""), stringsAsFactors=FALSE)
dtm <- dtm[, !colnames(dtm) %in% stopwords("pt")]
attr(dtm, "dictionary") <- dictionary
rm(dictionary)
meta(corpus, type="corpus", tag="language") <- attr(dtm, "language") <- "pt"
meta(corpus, type="corpus", tag="processing") <- attr(dtm, "processing") <- c(lowercase=TRUE,
punctuation=TRUE, digits=TRUE, stopwords=TRUE, stemming=FALSE, customStemming=FALSE, twitter=FALSE,
removeHashtags=NA, removeNames=NA)
# corpus
# dtm
freqTerms <- frequentTerms(dtm, NULL, 100)
attr(freqTerms, "title") <- "Most frequent terms by Document"
freqTerms
dict <- termsDictionary(dtm, "occurrences")
attr(dict, "title") <- "Terms dictionary sorted by number of occurrences"
dict
# library(wordcloud)
# wordcloud(words = dict2$words, freq = dict2$freq, max.words=200, colors=brewer.pal(3,"Greens"))
dict2=subset(dict, dict$Stopword != "Stopword")
View(dict2)
dict2=as.data.frame(ditcs2[1])
dict2=as.data.frame(ditc2[1])
dict2=as.data.frame(dict2[1])
View(dict2)
dict2$words=names(dict2)
View(dict2)
dict2$words=rownames(dict2)
View(dict2)
library(wordcloud)
wordcloud(words = dict2$words, freq = dict2$Occurrences, max.words=200, colors=brewer.pal(3,"Greens"))
wordcloud(words = dict2$words, freq = dict2$Occurrences, max.words=200, colors=brewer.pal(5,"Greens"))
wordcloud(words = dict2$words, freq = dict2$Occurrences, max.words=200, colors=brewer.pal(6,"Greens"))
wordcloud(words = dict2$words, freq = dict2$Occurrences, max.words=200, colors=brewer.pal(6,"Dark2"))
wordcloud(words = dict2$words, freq = dict2$Occurrences, max.words=200, colors=brewer.pal(10,"Dark2"))
library(RcmdrPlugin.temis)
library("RcmdrPlugin.temis", lib.loc="~/R/win-library/3.5")
detach("package:RcmdrPlugin.temis", unload=TRUE)
library("RcmdrPlugin.temis", lib.loc="~/R/win-library/3.5")
detach("package:RcmdrPlugin.temis", unload=TRUE)
library("Rcmdr", lib.loc="~/R/win-library/3.5")
detach("package:Rcmdr", unload=TRUE)
library("RcmdrPlugin.temis", lib.loc="~/R/win-library/3.5")
detach("package:RcmdrPlugin.temis", unload=TRUE)
detach("package:RcmdrPlugin.temis")
library("RcmdrPlugin.temis")
library(RcmdrPlugin.temis)
library(RcmdrPlugin.temis)
knitr::opts_chunk$set(echo = TRUE)
library(metafor)
res = rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg,
slab=paste(author, year, sep=", "))
res
forest(res,
atransf=exp,
at=log(c(.05, .25, 1, 4)),
xlim=c(-16,6),
ilab=cbind(dat.bcg$tpos,
dat.bcg$tneg,
dat.bcg$cpos,
dat.bcg$cneg),
ilab.xpos=c(-9.5,-8,-6,-4.5),
cex=.75)
op <- par(cex=.75, font=2)
text(c(-9.5,-8,-6,-4.5), 15, c("TB+", "TB-", "TB+", "TB-"))
text(c(-8.75,-5.25),     16, c("Vaccinated", "Control"))
text(-16,                15, "Author(s) and Year",     pos=4)
text(6,                  15, "Relative Risk [95% CI]", pos=2)
par(op)
funnel(res)
install.packages("mirt")
getwd()
system()
Sys.info()
Sys.Date()
Sys.chmod()
Sys.setlocale()
sys.source()
sessionInfo()
version
install.packages(epiR)
install.packages("epiR")
install.packages("epiR")
library(epiR)
epi.2by2(quiquadrado1, method="cross.sectional")
library(epiR)
epi.2by2(quiquadrado1, method="cross.sectional")
citation(epiR)
citation("epiR")
citation("epiR")
