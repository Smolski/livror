D=c(59,58),
E=c(70,70),
F=c(73,76)
)
knitr::kable(amostdep, caption = 'Amostras dependentes')
antes=c(99,62,74,59,70,73)
depois=c(94,62,66,58,70,76)
t.test(antes,depois,paired=TRUE)
cob=data.frame(Cobaia=c("Antes","Depois"))
cobaiaantes=c(635,704,662,560,603,745,698,575,633,669)
cobaiadepois=c(640,712,681,558,610,740,707,585,635,682)
amostdep2=cbind(cob,rbind(cobaiaantes,cobaiadepois))
knitr::kable(amostdep2, caption = 'Amostras dependentes - caso 2',row.names = FALSE)
cobaiaantes=c(635,704,662,560,603,745,698,575,633,669)
cobaiadepois=c(640,712,681,558,610,740,707,585,635,682)
t.test(cobaiaantes,cobaiadepois,paired=TRUE)
cob2=c("Tecido A","Tecido B")
tecidoa=c(36,26,31,38,28,20,37)
tecidob=c(39,27,35,42,31,39,22)
amostdep3=cbind(c("Tecido A", "Tecido B"),rbind(tecidoa,tecidob))
knitr::kable(amostdep3, caption = 'Comparação de dois tipos diferentes de tecidos', row.names = FALSE)
tecidoa=c(36,26,31,38,28,20,37)
tecidob=c(39,27,35,42,31,39,22)
var.test(tecidoa,tecidob)
t.test(tecidoa, tecidob, var.equal = TRUE, paired=FALSE)
quiquadrado1<-matrix(c(59,31,8,14),nc=2)
quiquadrado1
chisq.test(quiquadrado1)$expected
chisq.test(quiquadrado1)
chisq.test(quiquadrado1, correct=TRUE)
quiquadrado2<-matrix(c(8,3,59,43),nc=2)
quiquadrado2
chisq.test(quiquadrado2)$expected
fisher.test(quiquadrado2)
dados1=matrix(c(5,10,12,8),nc=2)
dados1
mcnemar.test(dados1)
mcnemar=matrix(c(15,18,5,7),nc=2)
mcnemar
chisq.test(mcnemar)$expected
mcnemar.test(mcnemar)
borrach=data.frame(
Ponto=c("Ponto 1","Ponto 2","Ponto 3","Ponto 4","Ponto 5","Ponto 6","Ponto 7"),
Borrachudos=c(19,12,10,17,25,22,15)
)
knitr::kable(borrach, caption = 'Número de borrachudos nos diferentes pontos')
borrach<-c(20,12,10,17,30,22,35)
chisq.test(borrach)$expected
chisq.test(borrach)
borrachudos<-c(20,12,10,17,30,22,35)
dist<-c(0.10,0.10,0.10,0.15,0.15,0.15,0.25)
chisq.test(borrachudos)$expected
chisq.test(borrachudos, p=dist)
knitr::include_graphics("correlacao1.png")
tempo=c(4,6,5.5,5,6.8,6.5,3.5,4.5,7,8,5.4,6.5,7.7,7.5,5.8)
nota=c(5.5,7.5,8,7,8.1,8.6,4.7,7.5,9.5,9.5,7.8,8,9.1,9.5,8)
plot(tempo,nota)
cor(tempo,nota)
knitr::include_graphics("regress1.png")
knitr::include_graphics("regress2.png")
regressao=lm(nota~tempo)
regressao
anova(regressao)
summary(regressao)
plot(nota~tempo)
abline(coef(regressao))
confint(regressao)
knitr::include_graphics("residuos1.png")
plot(fitted(regressao), residuals(regressao),
xlab="Valores ajustados", ylab="Residuos")
abline(h=0)
plot(tempo, residuals(regressao), xlab = "Valores independentes",
ylab="Residuos")
abline(h=0)
regressao$residuals
qqnorm(residuals(regressao))
hist(x = regressao$residuals,
xlab = "Resíduos",
ylab = "Densidade",
main = "",
col = "lightgreen",
probability = TRUE)
lines(density(regressao$residuals))
shapiro.test(residuals(regressao))
rstudent(regressao)
rstandard(regressao)
plot(rstandard(regressao))
abline(h=2,col="red")
abline(h=-2,col="red")
plot(rstudent(regressao))
abline(h=2,col="red")
abline(h=-2,col="red")
dffits(regressao)
2*(2/15)^(1/2)
plot(dffits(regressao))
abline(h=-0.73,col="red")
abline(h=0.73,col="red")
x0=data.frame(tempo=5.5)
predict(regressao, x0, interval="prediction")
knitr::include_graphics("rmarkdown.png")
knitr::include_graphics("criararq1.png")
knitr::include_graphics("compilar.png")
knitr::include_graphics("errocodif.png")
knitr::include_graphics("rmark2.png")
knitr::include_graphics("rmarktit.png")
knitr::include_graphics("rmarkform.png")
knitr::include_graphics("rmarklinks.png")
knitr::include_graphics("rmarkimg.png")
knitr::include_graphics("rmarklist.png")
knitr::include_graphics("rmarktab.png")
knitr::include_graphics("rmarkrodape.png")
knitr::include_graphics("rmarkautor.png")
knitr::include_graphics("abstract.png")
knitr::include_graphics("rmarkchunk1.png")
knitr::include_graphics("rmarkchunk2.png")
knitr::include_graphics("rmarkchunkopt.png")
knitr::include_graphics("rmarkchunk3.png")
knitr::include_graphics("rmarkchunktab1.png")
knitr::include_graphics("rmarkchunktab2.png")
knitr::include_graphics("rmarkchunkimg.png")
knitr::include_graphics("rmarkestilos.png")
knitr::include_graphics("rmarkestilos1.png")
knitr::include_graphics("rmarkestilos2.png")
knitr::include_graphics("rmarkbib.png")
knitr::include_graphics("rmarkmendeley.png")
knitr::include_graphics("rmarkcitar.png")
knitr::include_graphics("rmarkcitar1.png")
knitr::include_graphics("rmarkcitarf.png")
?taply
data("iris")
table(iris$Species;iris$Petal.Width)
table(iris$Species,iris$Petal.Width)
table(iris$Petal.Width,iris$Species)
table(iris$Petal.Width,iris$Species)
# Carregando a base
source("http://www.openintro.org/stat/data/cdc.R")
# Carregando a base
source("http://www.openintro.org/stat/data/cdc.R")
#Vizualizamos as primeiras linhas
head(cdc)
# Carregando a base
source("http://www.openintro.org/stat/data/cdc.R")
#Vizualizamos as primeiras linhas
head(cdc)
# Efetuamos a contgem dos dasos qualitativos com a função table
table(cdc$genhlth,cdc$gender)
# Criação de um vetor
c(2, 4, 6)
lista.1= list(matriz=matrix(c(1,2,1,5,7,9), nrow=3, ncol=2),
vetor=1:6)
lista.2= list(nomes=c("Marcelo", "Fábio", "Felipe"),
idade=c(25, 34, 26))
c(lista.1,lista.2)
# Reordenar colunas
informacoes=informacoes[c(8,2,3,4,1,6,5,7,9,10)]
?rank
rank(informacoes$Imc,ties.method = "last")
informacoes
rank(informacoes$Imc,ties.method = "first")
rank(informacoes$Imc,ties.method = "random")
rank(informacoes$Imc,ties.method = "average")
rank(-informacoes$Imc)
rank(-informacoes$Imc)
install.packages("getPass")
library("getPass", lib.loc="~/R/win-library/3.5")
getPass()
getPass()
getPass(msg="Olá")
getPass(msg="Insira a senha")
pass
pass="senha"
getPass(msg="Insira a senha")
getPass(msg="Insira a senha")
library("argon2")
install.packages("argon2")
hash <- pw_hash(pass)
library("argon2")
hash <- pw_hash(pass)
hash
pw_check(hash, pass)
pw_check(hash, "senha")
argon2 :: pw_ check ( hash , pass )
argon2::pw_check(hash,pass)
user_pw<-getPass::getPass()
hash_pw<-argon2::pw_hash(user_pw)
store_user_pw(hash_pw) # pseudocode , but you get the idea
user_pw<-getPass::getPass()
hash_pw<-argon2::pw_hash(user_pw)
store_user_pw(hash_pw) # pseudocode , but you get the idea
user_pw<-getPass::getPass()
user_pw<-getPass::getPass()
hash_pw<-argon2::pw_hash(user_pw)
store_user_pw(hash_pw)
store_user_pw(hash)
library("getPass", lib.loc="~/R/win-library/3.5")
store_user_pw(hash)
store_user_pw(hash_pw)
rm(pass)
rm(user_pw)
hist(as.numeric(`Renda_h`))
# automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
Sys.setenv(RSTUDIO_PDFLATEX = "latexmk")
options(width = 80, digits = 4,
bookdown.clean_book = TRUE)
knitr::opts_chunk$set(
tidy = FALSE,
fig.align = "center",
out.width = '80%',
comment = NA,
fig.pos = 'H'
)
knitr::include_graphics("paineis.png")
knitr::include_graphics("pacotes1.png")
knitr::include_graphics("pacotes2.png")
knitr::include_graphics("r3.png")
knitr::include_graphics("r4.png")
knitr::include_graphics("r4csv.png")
knitr::include_graphics("r6.png")
# soma
19+26
# subtração
19-26
# divisão
4/2
# multiplicação
4*2
# exponenciação
4^2
# prioridade de resolução
19 + 26 /4 -2 *10
((19 + 26) /(4 -2))*10
# raiz quadrada
sqrt(16)
# Logaritmo
log(1)
# maior que
2 > 1
1 > 2
# menor que
1 < 2
# maior ou igual a
0 >= (2+(-2))
# menor ou igual a
1 <= 3
# conjunção
9 > 11 & 0 < 1
# ou
6 < 5 | 0 > -1
# igual a
1 == 2/2
# diferente de
1 != 2
#Criando um objeto simples
objeto = "meu primeiro objeto" #enter
#Agora para retomar o objeto criado:
objeto #enter
#Pode ser efetuada uma operação:
a= 2+1
a
#Lista objetos do ambiente
ls()
#Remover um banco de dados
rm(a)
idade=c('11', '12', '31')
nomes=c("Elisa", "Priscila", "Carol")
cep=c(98700000,98701000,98702000)
idade= as.numeric(idade)
idade
cep = as.character(cep)
cep
#Carregando dados da base do RSdudio iris.
data(iris)
#Visualizando as primeiras 6 colunas
head(iris)
#Resumo do objeto
summary(iris)
#Para visualizar os nomes das colunas dos dados:
names(iris)
#vizualizar as ultimas seis linhas do objetos
tail(iris)
class(iris)
class(iris$Sepal.Length)
class(iris$Especie)
ls.str(iris)
View(iris)
dim(iris)
#Alterar o nome da coluna, sendo que o '[5]' indica que está na quinta coluna.
colnames(iris)[5]='Especie'
#Definindo a função attach para o objeto 'dados'.
attach(iris)
#Efetuando o sumário de 'pop.total'.
summary(Petal.Width)
#Como a coluna 'distrito' é um fator, o sumário será
#a contagem da quantidade de cada fator na coluna.
summary(Especie)
#Função 'tapply', número médio da população total por distrito.
tapply(Sepal.Length, Especie, mean)
#Função 'tapply' considerando NAs:
tapply(Sepal.Length, Especie, mean)
#Função 'tapply' sem considerar NAs:
tapply(Sepal.Length, Especie, mean, na.rm=T)
dadossetosa=subset(iris, Especie=='setosa')
head(dadossetosa)
dadossetosa2=subset(iris, Especie=='setosa'& Sepal.Length>5)
head(dadossetosa2)
# Carregando a base
source("http://www.openintro.org/stat/data/cdc.R")
#Vizualizamos as primeiras linhas
head(cdc)
# Efetuamos a contagem dos dados qualitativos com a função table
table(cdc$genhlth,cdc$gender)
# Criação de um vetor
c(2, 4, 6)
c(2:6)
# Criação de um vetor a partir do intervalo entre cada elemento e valores
#mínimo e máximo
seq(2, 3, by=0.5)
rep(1:3, times=4)
rep(1:3, each=3)
sexo<-factor(rep(c("F", "M"),each=8))
sexo
numeros=rep(1:3,each=3)
numeros
numeros.f<-factor(numeros)
numeros.f
tratamentos=factor(rep(c("controle","adubo A","adubo B"), each=4))
tratamentos
tratamentos=factor(rep(c("controle","adubo A","adubo B"), each=4),
levels=c("controle", "adubo A", "adubo B"))
tratamentos
participantes=factor(rep("mulheres",10), levels=c("mulheres","homens"))
participantes
nome.da.matriz= matrix(data=1:12,nrow = 3,ncol = 4)
nome.da.matriz
nome.da.matriz= matrix(data=1:12,nrow = 3,ncol = 4, byrow=T)
nome.da.matriz
lista= list(matriz=matrix(c(1,2,1), nrow=3, ncol=2))
lista
lista= list(matriz=matrix(c(1,2,1,5,7,9), nrow=3, ncol=2),vetor=1:6)
lista
lista
length(lista)
names(lista)
lista.1= list(matriz=matrix(c(1,2,1,5,7,9), nrow=3, ncol=2),
vetor=1:6)
lista.2= list(nomes=c("Marcelo", "Fábio", "Felipe"),
idade=c(25, 34, 26))
c(lista.1,lista.2)
estudantes= c("Camila", "Pedro", "Marcelo","Guilherme")
idade=c(21,17,17,18)
peso=c(65,79,80,100)
informacoes=data.frame(estudantes,idade,peso)
informacoes
informacoes$cidades=c("Nova Hartz","Gramado","Soledade",
"Porto Alegre")
informacoes
length(subset(informacoes$cidades, informacoes$cidades=="Soledade"))
informacoes.2=edit(informacoes)
knitr::include_graphics("95.png")
knitr::include_graphics("10.png")
informacoes.2
# Crição do data frame
estudantes=c("Guilherme", "Marcelo", "Pedro", "Camila")
altura= c(1.50, 1.9, 1.74, 1.80)
informacoes.3=data.frame(estudantes, altura)
# União de um banco de dados (existencia de uma váriavel em comum)
informacoes=merge(informacoes.2,informacoes.3, by="estudantes")
informacoes$Imc=c(informacoes$peso/(informacoes$altura^2))
informacoes
# Retirar as linhas que tenham pelo menos um NA:
informacoes<- na.omit(informacoes)
informacoes
# Substituir NA's por zero no data.frame
informacoes[is.na(informacoes)] = 0
informacoes
# Substituir números na coluna
informacoes$idade[informacoes$idade == 17] <- 19
informacoes
# Classificar qualitativamente informações em um determinado intervalo
classificacao=ifelse(informacoes$Imc<25, "peso normal",
"excesso de peso")
informacoes=cbind(informacoes, classificacao)
informacoes
imc=data.frame(Resultado=c("Abaixo de 17",
"Entre 17 e 18,49",
"Entre 18,5 e 24,99",
"Entre 25 e 29,99",
"Entre 30 e 34,99",
"Entre 35 e 39,99",
"Acima de 40"),
Significado=c("Muito abaixo do peso",
"Abaixo do peso",
"Peso normal",
"Acima do peso",
"Obesidade I",
"Obesidade II (severa)",
"Obesidade III (mórbida)"))
knitr::kable(imc, caption = 'Valores padrão para o IMC')
informacoes$tipoimc=ifelse(informacoes$Imc<17, "Muito abaixo do peso",
ifelse(informacoes$Imc>=17&informacoes$Imc<=18.49,"Abaixo do peso",
ifelse(informacoes$Imc>=18.5&informacoes$Imc<=24.99,"Peso Normal",
ifelse(informacoes$Imc>=25&informacoes$Imc<=29.99,"Acima do Peso",
ifelse(informacoes$Imc>=30&informacoes$Imc<=34.99,"Obesidade I",
ifelse(informacoes$Imc>=35&informacoes$Imc<=39.99,"Obesidade II",
"Obesidade III"))))))
informacoes
# Classificar informações usando o código binário
informacoes$binario= ifelse(informacoes$classificacao
== 'peso normal', 1, 0)
informacoes
novo1=data.frame(estudantes="Francisco", idade=30, peso=59,
cidades="Ijuí",
altura="1,59",
Imc= 23.33768,
classificacao= "peso normal",
tipoimc="Peso Normal",
binario=1)
informacoes=rbind(informacoes, novo1)
informacoes
require(dplyr)
informacoes= mutate(informacoes,
"faixa etaria"= ifelse(informacoes$idade<21,
"não adulto", "adulto"))
informacoes
# Reordenar colunas
informacoes=informacoes[c(8,2,3,4,1,6,5,7,9,10)]
# Inversão do posicionamento dos elementos
rev(informacoes)
# contagem de objetos
table(informacoes$classificacao)
# Ordenar os objetos em ordem crescente
sort(informacoes$idade)
# Ordem decrescente
informacoes[order(informacoes$idade, decreasing = TRUE),]
#ordem crescente
informacoes[order(informacoes$idade, decreasing = FALSE),]
#ordem crescente
informacoes[order(informacoes$cidades, decreasing = FALSE),]
informacoes$rankingImc=rank(informacoes$Imc)
informacoes
rank(-informacoes$Imc)
log(1.5)
exp(1)
max(informacoes$idade)
min(informacoes$idade)
# Para descobrir em qual posição se encontra o peso mínimo:
which.min(informacoes$peso)
which.max(informacoes$peso)
informacoes$estudantes[which.min(informacoes$peso)]
informacoes$estudantes[which.max(informacoes$Imc)]
# Arredondar para n casas decimais
round(informacoes$Imc, 2)
x2 <- pi * 100^(-1:3)
round(x2, 3)
signif(x2, 3)
# Realiza a somatória dos valores
sum(informacoes$idade)
# Desvio padrão
sd(informacoes$idade)
# Variancia
var(informacoes$idade)
# Calcula a média aritmética dos valores
mean(informacoes$idade)
# Informa o valor mediano do conjunto
median(informacoes$idade)
quantile(informacoes$idade,  probs = c(0.5, 1, 2, 5, 10, 50)/100)
abertura <- c("03/02/69", "17/08/67")
fechamento <- c("2000-20-01", "1999-14-08")
abertura <- as.Date(abertura, format = "%d/%m/%y")
fechamento <- as.Date(fechamento, format = "%Y-%d-%m")
# Diferença de dias dos intervalos informados
abertura-fechamento
require(readxl)
url <- "https://goo.gl/37Fdzz"
destfile <- "pesquisa_dados.xlsx"
curl::curl_download(url, destfile)
barplot(table(Sexo))
require(readxl)
url <- "https://goo.gl/37Fdzz"
destfile <- "pesquisa_dados.xlsx"
curl::curl_download(url, destfile)
require(readxl)
url <- "https://goo.gl/37Fdzz"
destfile <- "pesquisa_dados1.xlsx"
curl::curl_download(url, destfile)
require(readxl)
url <- "https://goo.gl/37Fdzz"
destfile <- "pesquisa_dados.xlsx"
curl::curl_download(url, destfile)
require(readxl)
url <- "https://goo.gl/37Fdzz"
destfile <- "pesquisa_dados.xlsx"
curl::curl_download(url, destfile)
require(readxl)
url <- "https://goo.gl/37Fdzz"
destfile <- "pesquisa_dados1.xlsx"
curl::curl_download(url, destfile)
require(readxl)
url <- "https://goo.gl/37Fdzz"
destfile <- "pesquisa_dados1.xlsx"
curl::curl_download(url, destfile)
require(readxl)
url <- "https://goo.gl/37Fdzz"
destfile <- "pesquisa_dados.xlsx"
curl::curl_download(url, destfile)
require(readxl)
url <- "https://goo.gl/37Fdzz"
destfile <- "pesquisa_dados.xlsx"
curl::curl_download(url, destfile)
