knitr::include_graphics("rmarkdown.png")
knitr::include_graphics("criararq1.png")
knitr::include_graphics("compilar.png")
knitr::include_graphics("errocodif.png")
knitr::include_graphics("rmark2.png")
knitr::include_graphics("rmarktit.png")
knitr::include_graphics("rmarkform.png")
knitr::include_graphics("rmarklinks.png")
knitr::include_graphics("rmarkimg.png")
knitr::include_graphics("rmarklist.png")
knitr::include_graphics("rmarktab.png")
knitr::include_graphics("rmarkrodape.png")
knitr::include_graphics("rmarkautor.png")
knitr::include_graphics("abstract.png")
knitr::include_graphics("rmarkchunk1.png")
knitr::include_graphics("rmarkchunk2.png")
knitr::include_graphics("rmarkchunkopt.png")
knitr::include_graphics("rmarkchunk3.png")
knitr::include_graphics("rmarkchunktab1.png")
knitr::include_graphics("rmarkchunktab2.png")
knitr::include_graphics("rmarkchunkimg.png")
knitr::include_graphics("rmarkestilos.png")
knitr::include_graphics("rmarkestilos1.png")
knitr::include_graphics("rmarkestilos2.png")
knitr::include_graphics("rmarkbib.png")
knitr::include_graphics("rmarkmendeley.png")
knitr::include_graphics("rmarkcitar.png")
knitr::include_graphics("rmarkcitar1.png")
knitr::include_graphics("rmarkcitarf.png")
barplot(table(`Pessoas_familia`), col=c("blue"),
main = "Frequência de pessoas por família",
xlab = "Frequência",
ylab = "Pessoas",
border = "red",
labels=TRUE)
barplot(table(`Pessoas_familia`), col=c("blue"),
main = "Frequência de pessoas por família",
xlab = "Frequência",
ylab = "Pessoas",
border = "red",
label=TRUE)
barplot(table(`Pessoas_familia`), col=c("blue"),
main = "Frequência de pessoas por família",
xlab = "Frequência",
ylab = "Pessoas",
border = "red",
labels=T)
barplot(table(Sexo),horiz=T)
par(las=2)
barplot(table(Sexo),horiz=T)
par(las=2)
par(mar=c(5,8,4,2))
barplot(table(Sexo),horiz=T)
par(las=2)
par(mar=c(5,8,4,2))
a=barplot(table(Sexo),horiz=T)
text(a)
a=barplot(table(Sexo),horiz=T)$counts
barplot(table(Sexo),horiz=T)$counts
par(las=2)
par(mar=c(5,8,4,2))
a=barplot(table(Sexo),horiz=T)
text(a$counts)
par(las=2)
par(mar=c(5,8,4,2))
a=barplot(table(Sexo),horiz=T)
text(a[,2])
par(las=2)
par(mar=c(5,8,4,2))
a=barplot(table(Sexo),horiz=T)
text(a[2,])
par(las=2)
par(mar=c(5,8,4,2))
a=barplot(table(Sexo),horiz=T)
text(a[2])
par(las=2)
par(mar=c(5,8,4,2))
a=barplot(table(Sexo),horiz=T)
par(las=2)
par(mar=c(5,8,4,2))
a=barplot(table(Sexo),horiz=T)
text(a, tot + 3, format(tot), xpd = TRUE, col = "blue")
par(las=2)
par(mar=c(5,8,4,2))
a=barplot(table(Sexo),horiz=T)
tot <- colMeans(a)
text(a, tot + 3, format(tot), xpd = TRUE, col = "blue")
View(a)
par(las=2)
par(mar=c(5,8,4,2))
a=barplot(table(Sexo),horiz=T)
barplot(table(`Pessoas_familia`), col=c("blue"),
main = "Frequência de pessoas por família",
xlab = "Frequência",
ylab = "Pessoas",
border = "red")
par(las=2)
par(mar=c(5,8,4,2))
barplot(table(arvores$Nomecientifico), horiz=TRUE)
par(las=2)
par(mar=c(8,8,4,2))
barplot(table(arvores$Nomecientifico), horiz=TRUE)
par(las=2)
par(mar=c(2,8,4,2))
barplot(table(arvores$Nomecientifico), horiz=TRUE)
par(las=2)
par(mar=c(5,2,4,2))
barplot(table(arvores$Nomecientifico), horiz=TRUE)
par(las=2)
par(mar=c(5,10,4,2))
barplot(table(arvores$Nomecientifico), horiz=TRUE)
par(las=2)
par(mar=c(5,15,4,2))
barplot(table(arvores$Nomecientifico), horiz=TRUE)
abertura <- c("03/02/69", "17/08/67")
fechamento <- c("2000-20-01", "1999-14-08")
abertura <- as.Date(abertura, format = "%d/%m/%y")
fechamento <- as.Date(fechamento, format = "%Y-%d-%m")
# Diferença de dias dos intervalos informados
abertura-fechamento
dif=abertura-fechamento
dif
class(dif)
as.numeric(dif)
abertura
abertura <- c("03/02/69")
fechamento <- c("2000-20-01")
abertura <- as.Date(abertura, format = "%d/%m/%y")
fechamento <- as.Date(fechamento, format = "%Y-%d-%m")
# Diferença de dias dos intervalos informados
dif=abertura-fechamento
dif
class(dif)
as.numeric(dif)
class(abertura)
abertura <- c("03/02/69")
fechamento <- c("2000-20-01")
abertura <- as.Date(abertura, format = "%d/%m/%y")
fechamento <- as.Date(fechamento, format = "%Y-%d-%m")
class(abertura)
class(fechamento)
# Diferença de dias dos intervalos informados
dif=abertura-fechamento
dif
class(dif)
as.numeric(dif)
units(dif)
library(readxl)
url <- "https://github.com/Smolski/livror/raw/master/pesquisa_dados.xlsx"
destfile <- "pesquisa_dados.xlsx"
curl::curl_download(url, destfile)
pesquisa_dados <- read_excel(destfile)
attach(pesquisa_dados)
ls.str(pesquisa_dados)
View(pesquisa_dados)
package(Amelia)
library(Amelia)
?Amelia
summary(pesquisa_dados)
missmap(pesquisa_dados)
missmap(irris)
missmap(iris)
str(pesquisa_dados)
class(pesquisa_dados)
boxplot(Idade~Sabor, data=pesquisa_dados)
boxplot(Idade~Praticidade, data=pesquisa_dados)
set.seed()
boxplot(Idade~Sexo, data=pesquisa_dados)
boxplot(Idade~Praticidade, data=pesquisa_dados)
boxplot(Idade~Preço, data=pesquisa_dados)
boxplot(Idade~Sabor, data=pesquisa_dados)
boxplot(Renda_h~Sabor, data=pesquisa_dados)
boxplot(`Renda_h`~Sabor, data=pesquisa_dados)
boxplot(Sexo~Sabor, data=pesquisa_dados)
boxplot(Sexo~Idade, data=pesquisa_dados)
boxplot(Idade~Sexo, data=pesquisa_dados)
boxplot(Sexo~Altura, data=pesquisa_dados)
boxplot(Sexo~Altura_(m), data=pesquisa_dados)
boxplot(Sexo~`Altura_(m)``, data=pesquisa_dados)
boxplot(Sexo~`Altura_(m)`, data=pesquisa_dados)
boxplot(`consumo_pos`~Idade, data=pesquisa_dados)
boxplot(Praticidade~Idade, data=pesquisa_dados)
boxplot(Idade~Praticidade, data=pesquisa_dados)
boxplot(`Renda_h`~Praticidade, data=pesquisa_dados)
boxplot(Divulgacao~Praticidade, data=pesquisa_dados)
boxplot(Idade~Divulgacao, data=pesquisa_dados)
boxplot(Idade~Sexo, data=pesquisa_dados)
boxplot(Idade~Sabor, data=pesquisa_dados)
boxplot(Idade~Sabor, data=pesquisa_dados)
library(Rcmdr)
install.packages("RcmdrPlugin.IPSUR")
Sys.time()
Sys.date()
Sys.Date()
sys.call()
sys.source()
sys.status()
Sys.chmod()
t(mtcars)
library("RcmdrPlugin.IPSUR", lib.loc="~/R/win-library/3.5")
install.packages("RcmdrPlugin.KMggplot2")
library("RcmdrPlugin.KMggplot2", lib.loc="~/R/win-library/3.5")
library("RcmdrPlugin.KMggplot2", lib.loc="~/R/win-library/3.5")
library(Rcmdr)
library(Rcmdr)
detach("package:RcmdrPlugin.KMggplot2", unload=TRUE)
library("Rcmdr", lib.loc="~/R/win-library/3.5")
?lubridate
??lubridate
library(lubridate)
ymd(20190215)
#> [1] "2010-12-15"
mdy("2/15/19")
#> [1] "2017-04-01"
library(lubridate)
ymd(20190215)
mdy("2/15/19")
# Criando uma base de dados
data=data.frame(data=c("01/01/2019","02/02/2019","02/02/2019","05/02/2019","06/02/2019"),
quant=c(100,200,100,150,300),
valor=c(550.00,600.00,100.00,150.00,250.00))
head(data)
# Criando uma nova variável do ano da venda
data$ano=year(data$data)
data
# Criando uma nova variável do mês da venda
data$mes=month(data$data)
data
# Criando nova variável do dia da venda
data$dia=day(data$data)
data
# Criando nova variável do dia da semana da venda
data$diasem=wday(data$data, label=TRUE)
data
# Valor das vendas por mês
aggregate(data$valor, list(Var = data$mes), sum)
# Quantidade de vendas por mês
aggregate(data$quant, list(Var = data$mes), sum)
# Valor das vendas por dia
aggregate(data$valor, list(Var = data$dia), sum)
# Valor das vendas por dia
aggregate(data$valor, list(Var = data$diasem), sum)
aggregate(valor ~ diasem + mes, data = data, sum)
library(dplyr)
data %>%
group_by(diasem) %>%
summarise(avg = sum(valor))
aggregate(data$valor, list(Var = data$mes), sum)
aggregate(data$valor, list(Var = data$mes), sum)
aggregate(data$quant, list(Var = data$mes), sum)
aggregate(data$valor, list(Var = data$dia), sum)
aggregate(data$valor, list(Var = data$diasem), sum)
# Criando nova variável do dia da venda
data$dia=day(data$data)
data
# Configurando a variável data
data$data=dmy(data$data)
# Criando uma nova variável do ano da venda
data$ano=year(data$data)
data
# Criando uma nova variável do mês da venda
data$mes=month(data$data)
data
# Criando nova variável do dia da venda
data$dia=day(data$data)
data
# Criando nova variável do dia da semana da venda
data$diasem=wday(data$data, label=TRUE)
data
data
aggregate(valor ~ diasem + mes, data = data, sum)
aggregate(valor ~ mes+diasem, data = data, sum)
data %>%
group_by(diasem) %>%
summarise(avg = sum(valor))
data %>%
group_by(diasem) %>%
summarise(tot = sum(valor))
data %>%
group_by(diasem) %>%
summarise(total = sum(valor))
data %>%
group_by(dia) %>%
summarise(total = sum(valor))
data %>%
group_by(ano) %>%
summarise(total = sum(valor))
# Criando uma base de dados
data=data.frame(data=c("01/01/2018","02/02/2019","02/02/2019","05/02/2019","06/02/2019"),
quant=c(100,200,100,150,300),
valor=c(550.00,600.00,100.00,150.00,250.00))
head(data)
# Configurando a variável data
data$data=dmy(data$data)
# Criando uma nova variável do ano da venda
data$ano=year(data$data)
data
# Criando uma nova variável do mês da venda
data$mes=month(data$data)
data
# Criando nova variável do dia da venda
data$dia=day(data$data)
data
# Criando nova variável do dia da semana da venda
data$diasem=wday(data$data, label=TRUE)
data
# Valor das vendas por mês
aggregate(data$valor, list(Var = data$mes), sum)
# Quantidade de vendas por mês
aggregate(data$quant, list(Var = data$mes), sum)
# Valor das vendas por dia
aggregate(data$valor, list(Var = data$dia), sum)
# Valor das vendas por dia
aggregate(data$valor, list(Var = data$diasem), sum)
# Valor das vendas por mês e dia da semana
aggregate(valor ~ mes + diasem, data = data, sum)
# Utilizando o pacote dplyr
library(dplyr)
data %>%
group_by(diasem) %>%
summarise(total = sum(valor))
data %>%
group_by(ano) %>%
summarise(total = sum(valor))
count(mtcars, cyl)
library(dplyr)
novo=select(mtcars, mpg, cyl)
head(novo)
count(mtcars, cyl)
novo=arrange(mtcars, cyl)
head(novo)
sys.source()
sys.status()
sys.status()
sys.call()
sys.source()
sys.status()
installed.packages()
mtcars
novo = mtcars %>%
filter(am==1) %>%
group_by(cyl)
novo = mtcars %>%
filter(am==1) %>%
group_by(cyl)
novo
novo = mtcars %>%
filter(am==1) %>%
group_by(cyl) %>%
select(disp)
novo
novo = mtcars %>%
filter(am==1) %>%
group_by(cyl) %>%
summarise(mean(disp))
novo
novo = mtcars %>%
filter(am==1) %>%
group_by(cyl) %>%
summarise(mean(disp)) %>%
summarise(mean(hp))
novo = mtcars %>%
filter(am==1) %>%
group_by(cyl) %>%
summarise(mean(disp), mean(hp))
novo
novo = mtcars %>%
filter(am==1) %>%
group_by(cyl) %>%
summarise(disp.media=mean(disp), hp.media=mean(hp))
novo
summarise(group_by(mtcars, cyl.agrup=cyl),
hp.medio=mean(hp),
wt.medio=mean(wt),
qtd=n())
novo = mtcars %>%
filter(am == 1) %>%
group_by(cyl) %>%
summarise(disp.drat=mean(drat),
hp.media=mean(hp))
novo
mtcars %>%
starts_with(4)
mtcars %>%
select(cyl,  starts_with(4))
mtcars %>%
select(cyl,  starts_with("4"))
mtcars %>%
select(drat,  starts_with("4"))
mtcars %>%
select(drat,  starts_with(4))
?starts_with
mtcars %>%
select(starts_with(d))
mtcars %>%
select(starts_with("d"))
mtcars %>%
select(starts_with("m"))
names(mtcars)
mtcars %>%
select(starts_with("d"))
mtcars %>%
select(mtcars:am,starts_with("d"))
mtcars %>%
select(starts_with("d"))
rnorm(10)
x=rnorm(10)
qqplot(x)
plot(x)
x=rnorm(100)
plot(x)
?contains
mtcars %>%
select(cyl %ini% 4)
mtcars %>%
select(cyl %ini% "4")
mtcars %>%
select(starts_with("d")) %>%
head
iris %>%
subset(Sepal.Length > 5) %>%
aggregate(. ~ Species, ., mean)
iris %>%
subset(Sepal.Length > 5) %>%
aggregate(. ~ Especie, ., mean)
mtcars %>%
aggregate(. ~ cyl, ., mean)
?aggregate
mtcars %>%
aggregate(. ~ cyl, mpg, mean)
mtcars %>%
aggregate(. ~ cyl, ., mean)
rnorm(200) %>%
matrix(ncol = 2) %T>%
plot %>%
colSums
rnorm(200) %>%
matrix(ncol = 2) %T>%
{ plot(.); . } %>%
colSums
?aggregate
mtcars %>%
select(contains("d")) %>%
head
mtcars %>%
select(contains("i")) %>%
head
mtcars %>%
select(contains("a")) %>%
head
?contains
c("Tecido A", "Tecido B")
plox_boxplot(iris)
install.packages("DataExplorer")
library(DataExplorer)
plox_boxplot(iris)
plot_boxplot(iris)
plot_histogram(iris)
hist(iris)
plot_boxplot(iris, "species")
plot_boxplot(iris, "Especies")
plot_boxplot(iris, "Especie")
plot_correlation(iris)
write.csv(iris, "iris.csv")
getwd
getwd()
knitr::include_graphics("regress1.png")
regressao=lm(nota~tempo)
regressao
regressaolinear=lm(nota~tempo)
regressaolinear
summary(regressaolinear)
plot(nota~tempo)
abline(coef(regressao))
confint(regressaolinear)
knitr::include_graphics("residuos1.png")
plot(fitted(regressaolinear), residuals(regressaolinear),
xlab="Valores ajustados", ylab="Residuos")
abline(h=0)
plot(tempo, residuals(regressaolinear),
xlab = "Valores independentes",
ylab="Residuos")
abline(h=0)
regressaolinear$residuals
qqnorm(residuals(regressaolinear))
hist(x = regressaolinear$residuals,
xlab = "Resíduos",
ylab = "Densidade",
main = "",
col = "lightgreen",
probability = TRUE)
lines(density(regressaolinear$residuals))
shapiro.test(residuals(regressaolinear))
rstudent(regressaolinear)
rstandard(regressaolinear)
plot(rstandard(regressaolinear)
abline(h=2,col="red")
plot(rstandard(regressaolinear))
abline(h=2,col="red")
abline(h=-2,col="red")
plot(rstudent(regressaolinear))
abline(h=2,col="red")
abline(h=-2,col="red")
dffits(regressaolinear)
plot(dffits(regressaolinear))
abline(h=-0.73,col="red")
abline(h=0.73,col="red")
2*(2/15)^(1/2)
x0=data.frame(tempo=5.5)
predict(regressaolinear, x0, interval="prediction")
plot(nota~tempo)
abline(coef(regressaolinear))
