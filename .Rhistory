mtcars %>%
select(starts_with("m"))
names(mtcars)
mtcars %>%
select(starts_with("d"))
mtcars %>%
select(mtcars:am,starts_with("d"))
mtcars %>%
select(starts_with("d"))
rnorm(10)
x=rnorm(10)
qqplot(x)
plot(x)
x=rnorm(100)
plot(x)
?contains
mtcars %>%
select(cyl %ini% 4)
mtcars %>%
select(cyl %ini% "4")
mtcars %>%
select(starts_with("d")) %>%
head
iris %>%
subset(Sepal.Length > 5) %>%
aggregate(. ~ Species, ., mean)
iris %>%
subset(Sepal.Length > 5) %>%
aggregate(. ~ Especie, ., mean)
mtcars %>%
aggregate(. ~ cyl, ., mean)
?aggregate
mtcars %>%
aggregate(. ~ cyl, mpg, mean)
mtcars %>%
aggregate(. ~ cyl, ., mean)
rnorm(200) %>%
matrix(ncol = 2) %T>%
plot %>%
colSums
rnorm(200) %>%
matrix(ncol = 2) %T>%
{ plot(.); . } %>%
colSums
?aggregate
mtcars %>%
select(contains("d")) %>%
head
mtcars %>%
select(contains("i")) %>%
head
mtcars %>%
select(contains("a")) %>%
head
?contains
c("Tecido A", "Tecido B")
plox_boxplot(iris)
install.packages("DataExplorer")
library(DataExplorer)
plox_boxplot(iris)
plot_boxplot(iris)
plot_histogram(iris)
hist(iris)
plot_boxplot(iris, "species")
plot_boxplot(iris, "Especies")
plot_boxplot(iris, "Especie")
plot_correlation(iris)
write.csv(iris, "iris.csv")
getwd
getwd()
knitr::include_graphics("regress1.png")
regressao=lm(nota~tempo)
regressao
regressaolinear=lm(nota~tempo)
regressaolinear
summary(regressaolinear)
plot(nota~tempo)
abline(coef(regressao))
confint(regressaolinear)
knitr::include_graphics("residuos1.png")
plot(fitted(regressaolinear), residuals(regressaolinear),
xlab="Valores ajustados", ylab="Residuos")
abline(h=0)
plot(tempo, residuals(regressaolinear),
xlab = "Valores independentes",
ylab="Residuos")
abline(h=0)
regressaolinear$residuals
qqnorm(residuals(regressaolinear))
hist(x = regressaolinear$residuals,
xlab = "Resíduos",
ylab = "Densidade",
main = "",
col = "lightgreen",
probability = TRUE)
lines(density(regressaolinear$residuals))
shapiro.test(residuals(regressaolinear))
rstudent(regressaolinear)
rstandard(regressaolinear)
plot(rstandard(regressaolinear)
abline(h=2,col="red")
plot(rstandard(regressaolinear))
abline(h=2,col="red")
abline(h=-2,col="red")
plot(rstudent(regressaolinear))
abline(h=2,col="red")
abline(h=-2,col="red")
dffits(regressaolinear)
plot(dffits(regressaolinear))
abline(h=-0.73,col="red")
abline(h=0.73,col="red")
2*(2/15)^(1/2)
x0=data.frame(tempo=5.5)
predict(regressaolinear, x0, interval="prediction")
plot(nota~tempo)
abline(coef(regressaolinear))
head(iris)
data(package = .packages(all.available = TRUE))
data(package = .packages(all.available = TRUE))
data()
data(africa, package=Amelia)
data(africa, package="Amelia")
head(data(africa, package="Amelia"))
View(africa)
head(data(africa, package="Amelia"))
africa=data(africa, package="Amelia")
head(africa)
africa=data(africa, package="Amelia")
str(africa)
africa=data(africa, package="Amelia")
str(data.frame(africa))
View(africa)
data(africa, package="Amelia")
data(africa, package="Amelia")
str(data.frame(africa))
data(africa, package="Amelia")
str(africa)
data(africa, package="Amelia")
head(africa)
system()
Sys.Date()
sys.call()
sys.status()
sys.source()
Sys.info()
Sys.time()
sessionInfo()
library(dplyr)
starwars=data.frame(starwars[1:5])
str(starwars)
summary(starwars)
names(starwars)
names(starwars)=abbreviate(names(starwars), minlength = 3)
names(starwars)
names(starwars)[1]="Nome"
names(starwars)=c("Nome", "Altura", "Peso", "Corcabelo", "Corpele")
names(starwars)
starwars$Corcabelo=as.factor(starwars$Corcabelo)
starwars$Corcabelo=as.factor(starwars$Corcabelo)
summary(starwars$Corcabelo)
starwars$Corcabelo=as.factor(starwars$Corcabelo)
starwars$Corpele=as.factor(starwars$Corpele)
summary(starwars$Corpele)
head(is.na(starwars))
table(is.na(starwars))
sapply(is.na(starwars))
apply(is.na(starwars))
apply(is.na(starwars), sum)
sapply(is.na(starwars), sum)
apply(is.na(starwars), sum)
apply(is.na(starwars), FUN=sum)
?apply
table(is.na(starwars))
# Substituindo NAs por média
starwars$Altura[is.na(starwars$Altura)]=mean(starwars$Altura, na.rm=TRUE)
summary(starwars$Altura)
# Substituindo NAs por zero
starwars$Peso[is.na(starwars$Peso)]=0
summary(starwars$Peso)
starwars$Peso[starwars$Peso==0]=NA
summary(starwars$Peso)
str(starwars)
summary(starwars)
starwars=na.omit(starwars)
summary(starwars)
class(iris)
class(iris$Sepal.Length)
class(iris$Especie)
names(iris)
library(knitr)
exerc6=data.frame(Antes=c(37.5,36.0,39.0,38.0,37.8,38.5,36.9,39.4,37.2,38.1,39.3,37.5,38.5,37.8,39.0),
Depois=c(37.8,36.4,37.6,37.2,36.9,37.7,36.8,38.1,36.7,37.3,38.0,37.1,36.6,35.0,39.0)
)
knitr::kable(exerc6)
library(knitr)
exerc6=data.frame(Antes=c("37,5","36,0","39,0","38,0","37,8","38,5","36,9","39,4","37,2","38,1","39,3","37,5","38,5","37,8","39,0"),
Depois=c("37,8","36,4","37,6","37,2","36,9","37,7","36,8","38,1","36,7","37,3","38,0","37,1","36,6","35,0","39,0")
)
knitr::kable(exerc6)
cor.test(tempo,nota)
# automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
Sys.setenv(RSTUDIO_PDFLATEX = "latexmk")
options(width = 80, digits = 4,
bookdown.clean_book = TRUE)
knitr::opts_chunk$set(
tidy = FALSE,
fig.align = "center",
out.width = '70%',
comment = NA,
fig.pos = 'H'
)
knitr::include_graphics("paineis.png")
knitr::include_graphics("pacotes1.png")
knitr::include_graphics("pacotes2.png")
knitr::include_graphics("r3.png")
knitr::include_graphics("r4.png")
knitr::include_graphics("r4csv.png")
knitr::include_graphics("r6.png")
head(iris)
data()
data(africa, package="Amelia")
head(africa)
# soma
19+26
# subtração
19-26
# divisão
4/2
# multiplicação
4*2
# exponenciação
4^2
# prioridade de resolução
19 + 26 /4 -2 *10
((19 + 26) /(4 -2))*10
# raiz quadrada
sqrt(16)
# Logaritmo
log(1)
# maior que
2 > 1
1 > 2
# menor que
1 < 2
# maior ou igual a
0 >= (2+(-2))
# menor ou igual a
1 <= 3
# conjunção
9 > 11 & 0 < 1
# ou
6 < 5 | 0 > -1
# igual a
1 == 2/2
# diferente de
1 != 2
#Criando um objeto simples
objeto = "meu primeiro objeto" #enter
#Agora para retomar o objeto criado:
objeto #enter
#Pode ser efetuada uma operação:
a= 2+1
a
#Lista objetos do ambiente
ls()
#Remover um banco de dados
rm(a)
idade=c('11', '12', '31')
nomes=c("Elisa", "Priscila", "Carol")
cep=c(98700000,98701000,98702000)
idade= as.numeric(idade)
idade
cep = as.character(cep)
cep
#Carregando dados da base do RSdudio iris.
data(iris)
#Visualizando as primeiras 6 colunas
head(iris)
#Resumo do objeto
summary(iris)
#Para visualizar os nomes das colunas dos dados:
names(iris)
#vizualizar as ultimas seis linhas do objetos
tail(iris)
class(iris)
class(iris$Sepal.Length)
class(iris$Species)
ls.str(iris)
View(iris)
dim(iris)
#Alterar o nome da coluna, sendo que o '[5]' indica que está na quinta coluna.
colnames(iris)[5]='Especie'
#Definindo a função attach para o objeto 'dados'.
attach(iris)
#Efetuando o sumário de 'pop.total'.
summary(Petal.Width)
#Como a coluna 'distrito' é um fator, o sumário será
#a contagem da quantidade de cada fator na coluna.
summary(Especie)
#Função 'tapply', número médio da população total por distrito.
tapply(Sepal.Length, Especie, mean)
#Função 'tapply' considerando NAs:
tapply(Sepal.Length, Especie, mean)
#Função 'tapply' sem considerar NAs:
tapply(Sepal.Length, Especie, mean, na.rm=T)
dadossetosa=subset(iris, Especie=='setosa')
head(dadossetosa)
dadossetosa2=subset(iris, Especie=='setosa'& Sepal.Length>5)
head(dadossetosa2)
# Carregando a base
source("http://www.openintro.org/stat/data/cdc.R")
#Vizualiza-se as primeiras linhas
head(cdc)
# Efetua-se a contagem dos dados qualitativos com a função table
table(cdc$genhlth,cdc$gender)
# Adiciona-se a soma dos valores das linhas e colunas
addmargins(table(cdc$genhlth,cdc$gender))
# Criação de um vetor
c(2, 4, 6)
c(2:6)
# Criação de um vetor a partir do intervalo entre cada elemento e valores
#mínimo e máximo
seq(2, 3, by=0.5)
rep(1:3, times=4)
rep(1:3, each=3)
sexo<-factor(rep(c("F", "M"),each=8))
sexo
numeros=rep(1:3,each=3)
numeros
numeros.f<-factor(numeros)
numeros.f
tratamentos=factor(rep(c("controle","adubo A","adubo B"), each=4))
tratamentos
tratamentos=factor(rep(c("controle","adubo A","adubo B"), each=4),
levels=c("controle", "adubo A", "adubo B"))
tratamentos
participantes=factor(rep("mulheres",10), levels=c("mulheres","homens"))
participantes
nome.da.matriz= matrix(data=1:12,nrow = 3,ncol = 4)
nome.da.matriz
nome.da.matriz= matrix(data=1:12,nrow = 3,ncol = 4, byrow=T)
nome.da.matriz
lista= list(matriz=matrix(c(1,2,1), nrow=3, ncol=2))
lista
lista= list(matriz=matrix(c(1,2,1,5,7,9), nrow=3, ncol=2),vetor=1:6)
lista
lista
length(lista)
names(lista)
lista.1= list(matriz=matrix(c(1,2,1,5,7,9), nrow=3, ncol=2),
vetor=1:6)
lista.2= list(nomes=c("Marcelo", "Fábio", "Felipe"),
idade=c(25, 34, 26))
c(lista.1,lista.2)
estudantes= c("Camila", "Pedro", "Marcelo","Guilherme")
idade=c(21,17,17,18)
peso=c(65,79,80,100)
informacoes=data.frame(estudantes,idade,peso)
informacoes
informacoes$cidades=c("Nova Hartz","Gramado","Soledade",
"Porto Alegre")
informacoes
length(subset(informacoes$cidades, informacoes$cidades=="Soledade"))
library(dplyr)
starwars=data.frame(starwars[1:5])
str(starwars)
summary(starwars)
names(starwars)=abbreviate(names(starwars), minlength = 3)
names(starwars)
names(starwars)[1]="Nome"
names(starwars)=c("Nome", "Altura", "Peso", "Corcabelo", "Corpele")
names(starwars)
starwars$Corcabelo=as.factor(starwars$Corcabelo)
starwars$Corpele=as.factor(starwars$Corpele)
summary(starwars$Corpele)
head(is.na(starwars))
table(is.na(starwars))
# Substituindo NAs por média
starwars$Altura[is.na(starwars$Altura)]=mean(starwars$Altura, na.rm=TRUE)
summary(starwars$Altura)
# Substituindo NAs por zero
starwars$Peso[is.na(starwars$Peso)]=0
summary(starwars$Peso)
starwars$Peso[starwars$Peso==0]=NA
summary(starwars$Peso)
starwars=na.omit(starwars)
summary(starwars)
informacoes.2=edit(informacoes)
knitr::include_graphics("95.png")
knitr::include_graphics("10.png")
informacoes.2
# Crição do data frame
estudantes=c("Guilherme", "Marcelo", "Pedro", "Camila")
altura= c(1.50, 1.9, 1.74, 1.80)
informacoes.3=data.frame(estudantes, altura)
head(informacoes.3)
# União de um banco de dados (existencia de uma váriavel em comum)
informacoes=merge(informacoes.2,informacoes.3, by="estudantes")
head(informacoes)
informacoes$Imc=c(informacoes$peso/(informacoes$altura^2))
informacoes
# Substituir números na coluna
informacoes$idade[informacoes$idade == 17] <- 19
informacoes
# Classificar qualitativamente informações em um determinado intervalo
classificacao=ifelse(informacoes$Imc<25, "peso normal","excesso de peso")
informacoes=cbind(informacoes, classificacao)
informacoes
library(knitr)
imc=data.frame(Resultado=c("Abaixo de 17",
"Entre 17 e 18,49",
"Entre 18,5 e 24,99",
"Entre 25 e 29,99",
"Entre 30 e 34,99",
"Entre 35 e 39,99",
"Acima de 40"),
Significado=c("Muito abaixo do peso",
"Abaixo do peso",
"Peso normal",
"Acima do peso",
"Obesidade I",
"Obesidade II (severa)",
"Obesidade III (mórbida)"))
knitr::kable(imc, caption = 'Valores padrão para o IMC')
# Classificar informações usando o código binário
informacoes$binario= ifelse(informacoes$classificacao
== 'peso normal', 1, 0)
informacoes
novo1=data.frame(estudantes="Francisco", idade=30, peso=59,
cidades="Ijuí",
altura="1.59",
Imc= 23.33768,
classificacao= "peso normal",
tipoimc="Peso Normal",
binario=1)
informacoes=rbind(informacoes, novo1)
summary(regressaolinear)
plot(nota~tempo)
abline(coef(regressaolinear))
plot(nota~tempo)
abline(regressaolinear)
plot(nota~tempo)
abline(regressaolinear)
qqnorm(residuals(regressaolinear))
novo1=data.frame(estudantes="Francisco", idade=30, peso=59,
cidades="Ijuí",
altura="1.59",
Imc= 23.33768,
classificacao= "peso normal",
tipoimc="Peso Normal",
binario=1)
informacoes=rbind(informacoes, novo1)
novo1
informacoes
informacoes$tipoimc=ifelse(informacoes$Imc<17, "Muito abaixo do peso",
ifelse(informacoes$Imc>=17&informacoes$Imc<=18.49,"Abaixo do peso",
ifelse(informacoes$Imc>=18.5&informacoes$Imc<=24.99,"Peso Normal",
ifelse(informacoes$Imc>=25&informacoes$Imc<=29.99,"Acima do Peso",
ifelse(informacoes$Imc>=30&informacoes$Imc<=34.99,"Obesidade I",
ifelse(informacoes$Imc>=35&informacoes$Imc<=39.99,"Obesidade II",
"Obesidade III"))))))
informacoes
plot(rstudent(regressaolinear))
abline(h=2,col="red")
abline(h=-2,col="red")
plot(rstudent(regressaolinear)) abline(h=2,col="red")
plot(rstudent(regressaolinear))
abline(h=2,col="red")
abline(h=-2,col="red")
citation(readxl)
citation(readr)
citation(readr)
citation(BETS)
citation(BETs)
citation("readxl")
citation("readr")
citation("haven")
citation("PerformanceAnalytics")
citation("knitr")
citation("dplyr")
citation("tidyr")
citation("stringr")
citation("lubridate")
citation("Amelia")
citation("stargazer")
citation("xtable")
citation("miktex")
citation("shiny")
citation("yaml")
?yaml
??yaml
citation("pander")
dir()
getwd()
data(package="BETs")
data(package="BETS")
data(package="Amelia")
data(package="AER")
TechChange
data(TechChange)
data(UKInflation)
data("UKInflation")
ncol(iris)
nrow(iris)
dim(starwars)
system()
Sys.timezone()
system.file()
system.file()
